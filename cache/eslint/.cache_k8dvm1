[{"F:\\Spellify\\pages\\index.tsx":"1","F:\\Spellify\\pages\\play.tsx":"2","F:\\Spellify\\pages\\previous-games.tsx":"3","F:\\Spellify\\pages\\result.tsx":"4","F:\\Spellify\\pages\\_app.tsx":"5","F:\\Spellify\\components\\Check.tsx":"6","F:\\Spellify\\components\\Header.tsx":"7","F:\\Spellify\\components\\Splash.tsx":"8","F:\\Spellify\\components\\Tooltip.tsx":"9"},{"size":2097,"mtime":1677396803602,"results":"10","hashOfConfig":"11"},{"size":11524,"mtime":1687266879370,"results":"12","hashOfConfig":"11"},{"size":3855,"mtime":1687267145318,"results":"13","hashOfConfig":"11"},{"size":8281,"mtime":1679582403208,"results":"14","hashOfConfig":"11"},{"size":899,"mtime":1679496736478,"results":"15","hashOfConfig":"11"},{"size":650,"mtime":1672327679816,"results":"16","hashOfConfig":"11"},{"size":1382,"mtime":1687256090599,"results":"17","hashOfConfig":"11"},{"size":674,"mtime":1671338933697,"results":"18","hashOfConfig":"11"},{"size":665,"mtime":1672140862171,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"1utx5vf",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Spellify\\pages\\index.tsx",["51"],[],"import Head from 'next/head'\r\n\r\nimport { BsPauseFill, BsPlayFill, BsStopFill } from 'react-icons/bs'\r\nimport useStore from '../util/hooks/useStore';\r\nimport { RxLetterCaseCapitalize } from 'react-icons/rx'\r\nimport Header from '../components/Header';\r\nimport { useRouter } from 'next/router';\r\nimport { motion } from 'framer-motion';\r\nimport Splash from '../components/Splash';\r\nimport { useEffect } from 'react';\r\nimport Link from 'next/link';\r\n//col 1 #1d1d42  col 2 #26264e\r\nexport default function Home() {\r\n  const router = useRouter()\r\n  const { setRes } = useStore()\r\n  const pushDifficulty = (difficulty: string) => {\r\n    return `/play?difficulty=${difficulty}`\r\n  }\r\n  useEffect(() => {\r\n\r\n    setRes([], '', false)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=' text-xl md:text-2xl my-16 font-bold'>\r\n        ðŸ™Œ Welcome to Spellify. Choose a difficulty to play.\r\n      </div>\r\n      <div className='flex my-16 md:my-36 flex-col gap-y-12 md:w-1/2 w-full mx-auto md:text-xl '>\r\n        <Link href={pushDifficulty('easy')} className='hover:border-none text-center  border border-white transition-all duration-200 bg-transparent hover:bg-gradient-to-r  from-emerald-400 via-green-500  to-cyan-500 p-4 rounded-md'>\r\n          Easy\r\n        </Link>\r\n        <Link href={pushDifficulty('medium')} className=' text-center border hover:border-none border-white transition-all duration-200 bg-transparent hover:bg-gradient-to-r  from-orange-500 via-pink-500 to-purple-500 p-4 rounded-md'>\r\n          Medium\r\n        </Link>\r\n        <Link href={pushDifficulty('hard')} className=' text-center border hover:border-none border-white transition-all duration-200 bg-transparent hover:bg-gradient-to-r  from-violet-500 to-pink-500 p-4 rounded-md'>\r\n          Hard\r\n        </Link>\r\n        <Link href='/previous-games' className=' text-center border hover:border-none border-white transition-all duration-200 bg-transparent hover:bg-gradient-to-r  from-violet-500 to-pink-500 p-4 rounded-md'>\r\n          View previous games\r\n        </Link>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","F:\\Spellify\\pages\\play.tsx",["52","53","54","55"],[],"import { useRouter } from \"next/router\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport { NextPage } from \"next\";\r\nimport {\r\n  BsChevronLeft,\r\n  BsChevronRight,\r\n  BsPlayFill,\r\n  BsStopFill,\r\n} from \"react-icons/bs\";\r\nimport { AnimateSharedLayout, motion } from \"framer-motion\";\r\nimport { Spelling } from \"../types/Spellings\";\r\nimport getSpellings from \"../util/getSpellings\";\r\nimport clsx from \"clsx\";\r\nimport useStore from \"../util/hooks/useStore\";\r\nimport { Difficulty } from \"../types/Difficulties\";\r\n\r\nconst Play = (props: NextPage) => {\r\n  let router = useRouter();\r\n  const { res } = useStore();\r\n  useEffect(() => {\r\n    if (router.isReady) {\r\n      // if store has a result,it means the user chose to practice, thus we do not need to redirect\r\n\r\n      if (res.length > 0) {\r\n        setState((prev) => ({ ...prev, spellings: res }));\r\n      } else {\r\n        if (!router.query) {\r\n          router.push(\"/\");\r\n        } else if (!router.query.difficulty) {\r\n          router.push(\"/\");\r\n        } else if (typeof router.query.difficulty !== \"string\") {\r\n          router.push(\"/\");\r\n        } else {\r\n          const spellings = getSpellings(router.query.difficulty as Difficulty);\r\n          if (spellings === null) {\r\n            router.push(\"/\");\r\n          } else setState((prev) => ({ ...prev, spellings }));\r\n        }\r\n      }\r\n    }\r\n  }, [router.isReady]);\r\n  const [state, setState] = useState(() => {\r\n    let spellings: Spelling[] = [];\r\n    return {\r\n      spellings,\r\n      index: 0,\r\n    };\r\n  });\r\n\r\n  const { spellings, index } = state;\r\n  const { setRes, difficulty } = useStore();\r\n  const inputRefs = useRef<Array<HTMLInputElement | null>>([]);\r\n  const [soundPlaying, setSoundPlaying] = useState(false);\r\n  //stores current letter, character by character\r\n  let [currentInput, setCurrentInput] = useState<string[]>([]);\r\n  useEffect(() => {\r\n    if (state.spellings[index])\r\n      //stores input refs to switch back and forth between them\r\n      inputRefs.current = inputRefs.current.slice(\r\n        0,\r\n        state.spellings[index].word.length\r\n      );\r\n  }, [state.index]);\r\n\r\n  useEffect(() => {\r\n    setCurrentInput((prev) => {\r\n      if (spellings[index]) {\r\n        if (spellings[index].input.length > 0) {\r\n          return spellings[index].input.split(\"\");\r\n        } else {\r\n          return new Array(spellings[index].word.length).fill(\"\");\r\n        }\r\n      } else {\r\n        return prev;\r\n      }\r\n    });\r\n  }, [state]);\r\n  const [delay, stagger] = [0.2, 0.2];\r\n  const container = {\r\n    hidden: { opacity: 0 },\r\n    show: {\r\n      opacity: 1,\r\n      transition: {\r\n        delayChildren: delay,\r\n        staggerChildren: stagger,\r\n        duration: 0.2,\r\n      },\r\n    },\r\n  };\r\n\r\n  const item = {\r\n    hidden: { opacity: 0 },\r\n    show: {\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 0.1,\r\n      },\r\n    },\r\n  };\r\n  let done = false;\r\n  if (spellings[index]) {\r\n    done = spellings[index].done;\r\n  }\r\n  const [buttonsVisible, setbuttonsVisible] = useState(true);\r\n  function playSound() {\r\n    let utterance = new SpeechSynthesisUtterance(spellings[index].word);\r\n    utterance.onend = (ev) => {\r\n      setSoundPlaying(false);\r\n    };\r\n    speechSynthesis.speak(utterance);\r\n    setSoundPlaying(true);\r\n  }\r\n  useEffect(() => {\r\n    if (state) {\r\n      if (state.spellings[index]) {\r\n        if (state.spellings[index].done === false) {\r\n          playSound();\r\n        }\r\n      }\r\n    }\r\n  }, [state]);\r\n  return (\r\n    <>\r\n      <Header showCounter index={index} total={spellings.length} />\r\n      <div className=\"absolute right-6 md:right-24 top-10\"></div>\r\n      <div className=\"h-full flex items-center  flex-col -my-16 md:-my-20\">\r\n        <div className=\"flex my-auto items-center justify-center flex-col gap-y-5\">\r\n          <div>\r\n            <button\r\n              disabled={soundPlaying}\r\n              onClick={() => {\r\n                playSound();\r\n              }}\r\n              className=\"w-16 h-16 rounded-full text-white flex items-center justify-center text-2xl bg-zinc-800\"\r\n            >\r\n              {soundPlaying ? <BsStopFill /> : <BsPlayFill />}\r\n            </button>\r\n          </div>\r\n          {spellings.length > 0 && (\r\n            <AnimateSharedLayout>\r\n              <motion.div\r\n                layout\r\n                className=\"w-full text-md  md:text-xl flex flex-row items-center justify-center  gap-x-3\"\r\n              >\r\n                {new Array(spellings[index].word.length)\r\n                  .fill(0)\r\n                  .map((el, i) => {\r\n                    const correct =\r\n                      spellings[index].input[i] === spellings[index].word[i];\r\n                    const done = spellings[index].done;\r\n                    const cl = clsx({\r\n                      \"border-red-500\": done && !correct,\r\n                      \"border-green-500\": done && correct,\r\n                    });\r\n                    return (\r\n                      <motion.input\r\n                        disabled={state.spellings[index].done}\r\n                        ref={(ref) => {\r\n                          inputRefs.current[i] = ref;\r\n                        }}\r\n                        layout\r\n                        onKeyUp={(e) => {\r\n                          if (e.key == \"Backspace\") {\r\n                            const inp = inputRefs.current[i];\r\n                            if (inp) {\r\n                              if (inp.value === \"\" && currentInput[i] === \"\") {\r\n                                let prev = inputRefs.current[i - 1];\r\n                                if (prev) {\r\n                                  prev.focus();\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }}\r\n                        key={i}\r\n                        value={currentInput[i] || \"\"}\r\n                        onChange={(e) => {\r\n                          console.log(\"e,string\", e.target.value);\r\n                          let r = inputRefs.current;\r\n                          let c = [...currentInput];\r\n                          c[i] = e.target.value[0];\r\n                          if (c[i]) {\r\n                            c[i] = c[i].toUpperCase();\r\n                          } else {\r\n                            c[i] = \"\";\r\n                          }\r\n                          if (r) {\r\n                            if (r[i] && c[i] !== \"\") {\r\n                              let nextInput = r[i + 1];\r\n                              if (nextInput) {\r\n                                nextInput.focus();\r\n                              }\r\n                            }\r\n                            if (r[i] && c[i] === \"\") {\r\n                              let prev = r[i - 1];\r\n                              if (prev) {\r\n                                prev.focus();\r\n                              }\r\n                            }\r\n                          }\r\n                          setCurrentInput(c);\r\n                        }}\r\n                        type=\"text\"\r\n                        className={`border-2 border-white ${cl} focus:border-orange-500 uppercase  rounded-sm w-full md:w-16 md:h-12 text-center text-white p-2 focus:outline-none bg-transparent`}\r\n                      />\r\n                    );\r\n                  })}\r\n              </motion.div>\r\n            </AnimateSharedLayout>\r\n          )}\r\n          {(!buttonsVisible || done) && (\r\n            <AnimateSharedLayout>\r\n              <motion.div\r\n                variants={container}\r\n                layout\r\n                className=\"flex text-md  md:text-2xl md:justify-center flex-row items-start justify-between\"\r\n              >\r\n                {spellings[index].word.split(\"\").map((el, i) => (\r\n                  <motion.div\r\n                    key={i}\r\n                    className={`rounded-sm w-full md:w-16 md:h-12 text-center text-gray-300 p-2 `}\r\n                    variants={item}\r\n                  >\r\n                    {el}\r\n                  </motion.div>\r\n                ))}\r\n              </motion.div>\r\n            </AnimateSharedLayout>\r\n          )}\r\n        </div>\r\n        {buttonsVisible && (\r\n          <div className=\"md:w-1/2  w-full  mx-auto flex flex-row   my-20  justify-between text-xl md:text-3xl\">\r\n            {index == 0 && <div></div>}\r\n            {index > 0 && (\r\n              <motion.button\r\n                animate={{\r\n                  opacity: index > 0 ? 1 : 0,\r\n                }}\r\n                disabled={index === 0}\r\n                transition={{\r\n                  duration: 0.3,\r\n                }}\r\n                onClick={() => {\r\n                  setState((prev) => ({ ...prev, index: prev.index - 1 }));\r\n                }}\r\n                className=\"p-4 bg-gradient-to-br border from-orange-500 rounded-md to-purple-500\"\r\n              >\r\n                {\" \"}\r\n                <BsChevronLeft />{\" \"}\r\n              </motion.button>\r\n            )}\r\n            {\r\n              <button\r\n                onClick={() => {\r\n                  /*\r\n                                    here, the mechanism of changing the current spelling forward\r\n                                    backward takes place. The way the actual spelling is displayed\r\n                                    before switching is handled here.\r\n                                    after all the spellings are done, it gets pushed to global state,\r\n                                    and to result page\r\n                                */\r\n                  if (!spellings[index].done) {\r\n                    setbuttonsVisible(false);\r\n\r\n                    setTimeout(() => {\r\n                      setState((prev) => {\r\n                        let newSpellings = [...spellings];\r\n                        newSpellings[index].done = true;\r\n                        newSpellings[index].input = currentInput.join(\"\");\r\n                        let n = prev.index + 1;\r\n                        if (!spellings[n]) {\r\n                          setRes(\r\n                            [...spellings],\r\n                            router.query.difficulty as Difficulty,\r\n                            false\r\n                          );\r\n                          router.replace(\"/result\");\r\n                          return { ...prev };\r\n                        }\r\n                        return { ...prev, index: n, spellings: newSpellings };\r\n                      });\r\n                      setbuttonsVisible(true);\r\n                    }, delay * 1000 + stagger * 1000 * spellings[index].word.length);\r\n                  } else {\r\n                    let n = index + 1;\r\n                    if (!spellings[n]) {\r\n                      setRes(\r\n                        [...spellings],\r\n                        (router.query.difficulty || difficulty) as Difficulty,\r\n                        false\r\n                      );\r\n                      router.replace(\"/result\");\r\n                    } else {\r\n                      setState((prev) => ({ ...prev, index: n }));\r\n                    }\r\n                  }\r\n                }}\r\n                className=\"p-4 rounded-md bg-gradient-to-br from-orange-500 to-purple-500\"\r\n              >\r\n                {index === spellings.length - 1 ? \"Finish\" : <BsChevronRight />}\r\n              </button>\r\n            }\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n","F:\\Spellify\\pages\\previous-games.tsx",["56"],[],"import { AnimateSharedLayout, motion } from \"framer-motion\";\r\nimport Link from \"next/link\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport Header from \"../components/Header\";\r\nimport { StorageData } from \"../util/hooks/StorageData\";\r\nimport useLocalStorage from \"../util/hooks/useLocalStorage\";\r\nimport useStore from \"../util/hooks/useStore\";\r\n\r\nconst PreviousGames = () => {\r\n  const [storage, setStorage] = useLocalStorage<StorageData[]>(\"results\", []);\r\n  const [state, setState] = useState<StorageData[]>([]);\r\n\r\n  useEffect(() => {\r\n    setState(storage);\r\n  }, []);\r\n\r\n  const { setRes } = useStore();\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"capitalize text-2xl md:text-3xl text-center p-2\">\r\n        previous games\r\n      </div>\r\n\r\n      <div>{state.length == 0 ? \"No Data\" : \"\"}</div>\r\n      {state.length > 0 && (\r\n        <AnimateSharedLayout>\r\n          <motion.div\r\n            layout\r\n            className=\"flex flex-col gap-y-5 items-center justify-center w-full\"\r\n          >\r\n            {state.map((el, i) => {\r\n              const options = {\r\n                year: \"numeric\",\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n              } as Intl.DateTimeFormatOptions;\r\n              const dt = new Date(el.date).toLocaleDateString(\r\n                undefined,\r\n                options\r\n              );\r\n              let grad = \"from-pink-500 to-red-500\";\r\n              const diff = el.difficulty;\r\n              if (diff == \"hard\") {\r\n                grad = \"from-pink-500 to-red-500\";\r\n              }\r\n              if (diff == \"medium\") {\r\n                grad = \"from-blue-500 to-violet-500\";\r\n              }\r\n              if (diff == \"easy\") {\r\n                grad = \"from-cyan-500 to-violet-500\";\r\n              }\r\n              return (\r\n                <motion.div\r\n                  key={i}\r\n                  className={`w-full flex justify-between flex-row rounded-md md:w-1/2 p-4 bg-gradient-to-r ${grad}`}\r\n                >\r\n                  <div>\r\n                    <div className=\"text-2xl\">{dt}</div>\r\n\r\n                    <div className=\"text-xl\">\r\n                      Score: {el.data.avgPct.toFixed(2)}%\r\n                    </div>\r\n                    {el.difficulty && (el.difficulty as string) !== \"\" && (\r\n                      <div className=\"text-xl capitalize\">\r\n                        Difficulty: {el.difficulty}\r\n                      </div>\r\n                    )}\r\n                    <Link\r\n                      href=\"/result\"\r\n                      onClick={() => {\r\n                        setRes(\r\n                          el.data.words.map((w) => ({\r\n                            done: true,\r\n                            input: w.input,\r\n                            word: w.actualWord,\r\n                          })),\r\n                          el.difficulty || \"\",\r\n                          true\r\n                        );\r\n                      }}\r\n                      className=\"text-bold\"\r\n                    >\r\n                      View Results {\">\"}\r\n                    </Link>\r\n                  </div>\r\n                  <div>\r\n                    <button\r\n                      className=\"md:text-2xl\"\r\n                      onClick={() => {\r\n                        let nState = [...state.filter((el, j) => j !== i)];\r\n                        setState(nState);\r\n                        setStorage(nState);\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      <BsTrash />\r\n                    </button>\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </motion.div>\r\n        </AnimateSharedLayout>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviousGames;\r\n","F:\\Spellify\\pages\\result.tsx",["57","58"],[],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../components/Header'\r\nimport useStore from '../util/hooks/useStore'\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, AreaChart, Area, Label } from 'recharts';\r\nimport CustomTooltip from '../components/Tooltip';\r\nimport clsx from 'clsx';\r\nimport { BsAsterisk, BsX } from 'react-icons/bs';\r\nimport { ResultData } from '../types/ResultData';\r\nimport { motion } from 'framer-motion';\r\nimport Check from '../components/Check';\r\nimport { useRouter } from 'next/router';\r\nimport { Spelling } from '../types/Spellings';\r\nimport useLocalStorage from '../util/hooks/useLocalStorage';\r\nimport { StorageData } from '../util/hooks/StorageData';\r\n\r\nconst cols = ['text-red-500', 'text-yellow-500', 'text-emerald-500']\r\n\r\nconst Result = () => {\r\n    const { res, setRes, difficulty, isSaved } = useStore()\r\n    const [selectedSpellings, setSelectedSpellings] = useState(new Array(res.length).fill(false))\r\n    const [dat, setData] = useState<ResultData>({\r\n        avgPct: 0,\r\n        words: []\r\n    })\r\n    let { words: data, avgPct } = dat\r\n    useEffect(() => {\r\n        let a = [...selectedSpellings]\r\n        let words = res.map((el, idx) => {\r\n            const totalLetters = el.word.length\r\n            let correctLetters = 0\r\n            for (let i = 0; i < totalLetters; i++) {\r\n                if (el.word[i] === el.input[i]) {\r\n                    correctLetters++\r\n                }\r\n            }\r\n\r\n            let acc = (correctLetters / totalLetters) * 100\r\n            if (correctLetters === 0) {\r\n                acc = 0\r\n            }\r\n            if (acc <= 40) {\r\n                a[idx] = true\r\n            }\r\n            return {\r\n                input: el.input,\r\n                actualWord: el.word,\r\n                score: acc\r\n            }\r\n        })\r\n        setSelectedSpellings(a)\r\n        setData({\r\n            words,\r\n            avgPct: words.reduce((prev, cur) => prev + cur.score, 0) / words.length\r\n\r\n        })\r\n\r\n    }, [])\r\n    const router = useRouter()\r\n    const [storage, setStorage] = useLocalStorage<StorageData[]>('results', [])\r\n    useEffect(() => {\r\n        if (res.length === 0) {\r\n            router.replace('/')\r\n        }\r\n        return () => {\r\n            let nStorage = [...storage]\r\n            nStorage.push({\r\n                data: dat,\r\n                date: new Date().getTime(),\r\n                difficulty\r\n            })\r\n            if (dat.words.length > 0 && !isSaved) {\r\n                setStorage(nStorage)\r\n            }\r\n        }\r\n    }, [dat])\r\n    const allCorrectSpellings = selectedSpellings.every((el) => el !== true)\r\n    const q = selectedSpellings.filter((el) => el === true).length\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='w-full h-1/2 md:w-1/2 -mx-2 md:mx-auto my-12'>\r\n                <ResponsiveContainer width={'100%'} className={'  w-full  flex items-center justify-center'}>\r\n                    <AreaChart data={data}>\r\n                        <defs>\r\n                            <linearGradient id=\"lgrad\" x1=\"0%\" y1=\"50%\" x2=\"100%\" y2=\"50%\" >\r\n\r\n                                <stop offset=\"10%\" stopColor='currentColor' className='text-indigo-500' />\r\n                                <stop offset=\"100%\" stopColor='currentColor' className='text-violet-500' />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Tooltip content={<CustomTooltip />} />\r\n                        <YAxis>\r\n                            <Label fill='#ffffff' className=' text-md md:text-2xl' angle={270} position='insideLeft' offset={10}\r\n                                value=\"Score\"\r\n                                style={{ textAnchor: 'middle' }}></Label>\r\n                        </YAxis>\r\n                        <XAxis />\r\n                        <Area type=\"monotone\" dataKey=\"score\" stroke=\"white\" fillOpacity={1} fill=\"url(#lgrad)\" />\r\n\r\n\r\n                    </AreaChart>\r\n\r\n                </ResponsiveContainer>\r\n\r\n            </div>\r\n            <div className='font-inter text-2xl md:text-5xl w-1/2 mx-auto flex flex-col items-center justify-start'>\r\n                <div className='flex flex-col my-4'>\r\n\r\n                    <div className='flex gap-x-2 items-center justify-center'>\r\n                        <div className={`${clsx([cols[0] && avgPct < 50, cols[1] && avgPct >= 50, cols[2] && avgPct >= 70])}`}>{avgPct.toFixed(1)}%</div>\r\n                    </div>\r\n                    <div\r\n                        className=' my-2 font-bold bg-gradient-to-bl from-orange-500 to-pink-500 bg-clip-text text-transparent '\r\n                    >\r\n\r\n                        ACCURACY</div>\r\n                </div>\r\n            </div>\r\n            <div className=' grid grid-cols-1 md:grid-cols-2 gap-8 md:w-3/4 w-full mx-auto items-center justify-center '>\r\n                {data.map((el, i) => {\r\n                    const selectedSpellingStyle = clsx({\r\n                        'bg-gradient-to-r from-violet-500 to-pink-500': selectedSpellings[i]\r\n                    }\r\n                    )\r\n                    return <button onClick={() => {\r\n                        const prevSelectedSpellings = [...selectedSpellings]\r\n                        prevSelectedSpellings[i] = !prevSelectedSpellings[i]\r\n                        setSelectedSpellings(prevSelectedSpellings)\r\n                    }} className={`flex flex-col ${selectedSpellingStyle} p-0.5 `} key={i}>\r\n                        <div className='w-full h-full bg-zinc-800 p-6'>\r\n\r\n                            <div className='flex flex-col gap-y-3 items-start'>\r\n                                <div className='flex flex-row gap-x-1 items-center justify-center'>\r\n                                    {el.actualWord.split('').map((el, j) => <div className='w-8 mx-auto flex items-center justify-center' key={j}>{el}</div>)}\r\n                                </div>\r\n                                <div className='flex flex-row gap-x-1 items-center'>\r\n                                    {el.actualWord.split('').map((a, j) => {\r\n                                        let w = el.input[j] || ' '\r\n                                        const cl = clsx({\r\n                                            \"border-red-500 text-red-500\": el.input[j] !== a,\r\n                                            \"border-green-500 text-green-500\": el.input[j] === a\r\n                                        })\r\n                                        return <div className={`border-b w-8 mx-auto ${cl} whitespace-pre text-center `} key={j}>\r\n                                            {w === ' ' ? <BsX width={2} className='text-center mx-auto' /> : w}\r\n                                        </div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                })\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className='w-full md:w-1/2 mx-auto justify-between items-center flex my-12  text-md md:text-xl'>\r\n                <button onClick={() => {\r\n                    router.replace('/')\r\n                }} className='duration-200 transform will-change-transform transition-transform hover:scale-125'> {\"<\"} Go back </button>\r\n\r\n                {!allCorrectSpellings && <button onClick={() => {\r\n                    let spellings = [...data]\r\n                    let newState: Spelling[] = []\r\n                    for (let i in spellings) {\r\n                        let spell = spellings[i]\r\n                        let selected = selectedSpellings[i]\r\n                        if (selected) {\r\n                            newState.push({ done: false, input: '', word: spell.actualWord })\r\n                        }\r\n                    }\r\n                    setRes(newState, difficulty, false)\r\n                    router.replace('/play')\r\n                }} className='transform will-change-transform hover:scale-125 transition-transform duration-200'>  Practice Incorrect  Words {`(${q})`} {\">\"} </button>}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Result","F:\\Spellify\\pages\\_app.tsx",[],[],"F:\\Spellify\\components\\Check.tsx",[],[],"F:\\Spellify\\components\\Header.tsx",[],[],"F:\\Spellify\\components\\Splash.tsx",[],[],"F:\\Spellify\\components\\Tooltip.tsx",[],[],{"ruleId":"59","severity":1,"message":"60","line":22,"column":6,"nodeType":"61","endLine":22,"endColumn":8,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":42,"column":6,"nodeType":"61","endLine":42,"endColumn":22,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"65","line":64,"column":6,"nodeType":"61","endLine":64,"endColumn":19,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"67","line":78,"column":6,"nodeType":"61","endLine":78,"endColumn":13,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"69","line":122,"column":6,"nodeType":"61","endLine":122,"endColumn":13,"suggestions":"70"},{"ruleId":"59","severity":1,"message":"71","line":16,"column":6,"nodeType":"61","endLine":16,"endColumn":8,"suggestions":"72"},{"ruleId":"59","severity":1,"message":"73","line":57,"column":8,"nodeType":"61","endLine":57,"endColumn":10,"suggestions":"74"},{"ruleId":"59","severity":1,"message":"75","line":75,"column":8,"nodeType":"61","endLine":75,"endColumn":13,"suggestions":"76"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setRes'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has missing dependencies: 'res' and 'router'. Either include them or remove the dependency array.",["78"],"React Hook useEffect has missing dependencies: 'index' and 'state.spellings'. Either include them or remove the dependency array.",["79"],"React Hook useEffect has missing dependencies: 'index' and 'spellings'. Either include them or remove the dependency array.",["80"],"React Hook useEffect has missing dependencies: 'index' and 'playSound'. Either include them or remove the dependency array.",["81"],"React Hook useEffect has a missing dependency: 'storage'. Either include it or remove the dependency array.",["82"],"React Hook useEffect has missing dependencies: 'res' and 'selectedSpellings'. Either include them or remove the dependency array.",["83"],"React Hook useEffect has missing dependencies: 'difficulty', 'isSaved', 'res.length', 'router', 'setStorage', and 'storage'. Either include them or remove the dependency array.",["84"],{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [setRes]",{"range":"101","text":"102"},"Update the dependencies array to be: [res, router, router.isReady]",{"range":"103","text":"104"},"Update the dependencies array to be: [index, state.index, state.spellings]",{"range":"105","text":"106"},"Update the dependencies array to be: [index, spellings, state]",{"range":"107","text":"108"},"Update the dependencies array to be: [index, playSound, state]",{"range":"109","text":"110"},"Update the dependencies array to be: [storage]",{"range":"111","text":"112"},"Update the dependencies array to be: [res, selectedSpellings]",{"range":"113","text":"114"},"Update the dependencies array to be: [dat, difficulty, isSaved, res.length, router, setStorage, storage]",{"range":"115","text":"116"},[731,733],"[setRes]",[1422,1438],"[res, router, router.isReady]",[2159,2172],"[index, state.index, state.spellings]",[2523,2530],"[index, spellings, state]",[3524,3531],"[index, playSound, state]",[624,626],"[storage]",[2085,2087],"[res, selectedSpellings]",[2638,2643],"[dat, difficulty, isSaved, res.length, router, setStorage, storage]"]